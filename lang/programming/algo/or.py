
import numpy as np

"""
与门的脑补参数实现
    《深度学习入门：基于Python的理论与实现》 p.28
"""
def OR(x1, x2):
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5]) # 仅权重和偏置与AND不同！
    b = -0.2
    tmp = np.sum(w*x) + b
    if tmp <= 0:
        return 0
    else:
        return 1

"""
与门单层神经网络实现


矩阵中的元素
    上标是行，下标是列

维度
    行向量是多维空间的一个点由不同维度的坐标组成的向量
    列向量是多维空间的多个点的同一维度的坐标组成的向量

网络结构
    输入层2 结点，没有隐层，输出层1 结点

输入矩阵
    X 维度是 4*2 （四组输入，每一组是 1*2）
    输入矩阵要左乘权重矩阵，既X点乘W： X.W
        W 右乘X，X 的列降维到和W 一至，降维的方法是矩阵所有的列加仅求和
            左乘是行变换，右乘是列变换
            列向量右乘一个矩阵，左边的矩阵行数没变列数被降维了（被降到和列向量对齐）

权重矩阵
    第一层2 输入对应1 输出，共有两条边，所以需要2 权重
    W 维度是 2*1

输出矩阵
    Y 4*1（四组输入，对应四个输出，四个标量组成的列向量）

梯度下降过程向量化 - Logistic回归总结 洞庭之子
    https://www.cnblogs.com/earendil/p/8268757.html
    doc\lang\programming\梯度下降过程向量化
"""

import numpy as np


X = np.array([[0,0],[0,1],[1,0],[1,1]])   # 4*2
Y = np.array([[0],[1],[1],[1]])           # 4*1 
W = np.random.uniform(size=(2,1))         # 2*1
"""
观察输入输出的维度，可以看出需要对X 的列进行压缩，既把列从维度2 降维到1
    右乘是列变换，应该让权重矩阵W 右乘X，既 X.W
    矩阵点乘的维度变化
        (4*2).(2*1) = 4*1 
"""



if __name__ == "__main__":

    print (X.dtype, X.shape, Y.shape)

    #print(OR(0, 0), OR(0,1), OR(1, 0), OR(1,1))








