
所有可用乐器  
EntityValue["MusicalInstrument", "Entities"] 
(*
Xiao 箫 
Harmonica 口琴 
Violin  小提琴 
Bass 大提琴 
AudioPitchShift 变调  
AudioTimeStretch 变速

音符
SoundNote 

单音  
Sound[SoundNote["G", 1, "Harmonica"]]

第一个音符0秒开始0.3秒结束
第二个音符0.3秒开始1秒结束
Sound[{SoundNote["C", {0, 0.3}, "Piano"], SoundNote["G", {0.3, 1}, "Piano"]}] // EmitSound  (*开始时间，结束时间*)

音量(强拍弱拍)  
Sound[Table[SoundNote["C", .2, SoundVolume -> v], {v, 0, 1, 0.1}]]    
四二拍：强、弱  
四四拍：强、弱、次强、弱  
四三拍：强、弱、弱  

音符时值1拍和4拍  
Sound[{SoundNote["G"], SoundNote["G"], SoundNote["G"], SoundNote["Eb", 4]}, 1.5]

tempo 速度  
“tempo”是意大利语的时间，源于拉丁语的“tempus”
BPM 每分钟多少拍
这表示一个指定的音符，例如四分音符在一分钟内出现的次数
=56，这个记号告诉你，每一分钟唱56个4分音符，就是说明，以四分音符为一拍，每分钟唱56拍，再比如：
音乐速度的表示有两种，一种是用文字来表示的，比如“快速”、“中速”、“慢速”、“稍快”等等，还有一种是用音乐术语来表示的，这些音乐术语都是意大利语，目前国际上多采用这种标记，比如：Andante（慢板）、Allegro（快板）、Presto（急板）、Pill mosso（稍快）等等。再准确的标志就是前面所说的，标明一分钟里唱多少个几分音符

MIDI  
sn=Import["ExampleData/scaleprogression.mid","SoundNotes"];
Take[sn[[1]],10] (*查看第一小节的10个音符？*)

替换音器  
Sound[sn /. {"Harp" -> "Organ"}]

导入 MIDI 文件，并查看前三个 SoundNote，最后以 120 s 的总时长演奏 MIDI 乐曲。
sn = Import[Directory[] <> "\WolframAudio\wtk1-prelude1.mid"];
sn[[1]][[1 ;; 3]]
Sound[sn, 120]
*) 

乐器的情报  
Entity["MusicalInstrument", "Xiao"]["Dataset"]  （* Clef 谱号  treble 高音；三重的；三倍的 *) 


https://reference.wolfram.com/language/ref/entity/MusicalInstrument.html


查找只有两种声音的乐器：
EntityClass["MusicalInstrument","Polyphony" -> MemberQ[2]] // EntityList

MusicalInstrument  
来自世界各地文化的乐器  

从一个实体的全部可用属性中提取数据集：
Entity["MusicalInstrument", "Dihu"]["Dataset"]  



EntityValue["MusicalInstrument","Entities"]

"MusicalInstrument" 实体包括打击乐器、号角、弦乐、电子和其他乐器.
部分属性可用于作为整体的 "MusicalInstrument" 实体类型，并可用 EntityValue["MusicalInstrument",property] 格式给出，此类属性包括：
"Properties"  可用属性列表
"PropertyCanonicalNames"  可用属性的标准名称
"SampleEntities"  可用实体的范例列表（通常长度为 10）
"SampleEntityClasses" 可用实体类的范例列表（通常长度为 10）
"EntityCount" 可用实体的数目
"Entities"  可用实体的列表
"EntityCanonicalNames"  可用实体的标准名称
"EntityClasses" 可用实体类的列表
"EntityClassCanonicalNames" 可用实体类的标准名称
"PropertyClasses" 可用属性分类的列表
"PropertyClassCanonicalNames" 可用属性分类的标准名称
"PropertyCount" 可用属性的数目
以下注释可用于 EntityValue["MusicalInstrument",property,annotation] 的第三个参数中：
"Source"  属性的来源信息
"Date"  实体-属性值相关联的日期（若存在）
"EntityAssociation" 实体和实体-属性值的关联
"PropertyAssociation" 属性和实体-属性值的关联
"EntityPropertyAssociation" 此关联中，指定实体是键，值为属性和实体-属性值的嵌套关联
"PropertyEntityAssociation" 此关联中，指定属性是键，值为实体和实体-属性值的嵌套关联
"Dataset" 此数据集，指定实体是键和值为属性名称和实体-属性值的关联
以下注释可用于 EntityValue[property,annotation] 的第二个参数中：
"Qualifiers"  可用于属性的限定词列表
"QualifierValues" 可用于每个限定词的可用值列表
"DefaultQualifierValues"  属性限定词的默认值列表
"Description" 属性的简短文字描述
"Definition"  属性的详细文字定义
"PhysicalQuantity"  实体-属性值相关联的物理量
"Unit"  实体-属性值相关联的单位
Automatic 的限定词值表示一个可适用的值的格式; 例如，对于 "Date" 的限定词，包括正确的日期或日期跨度.




https://musescore.org/zh-hans/instruments/harmonica-c16c 

16 Hole C Chromatic Harmonica
longName: 16 Hole C Chromatic Harmonica
shortName: Harm.
description: 16 Hole Chromatic Harmonica in C
musicXMLid: wind.reed.harmonica
clef: G
transposingClef: not set
concertClef: not set
barlineSpan: 1
aPitchRange: 48-96
pPitchRange: 48-96
transposeDiatonic: not set
transposeChromatic: not set

instrumentTable = {
        "Accordion", "Agogo", "AltoSax", "Applause", "Atmosphere", "Bagpipe", 
         "Bandoneon", "Banjo", "BaritoneSax", "Bass", "BassAndLead", 
         "Bassoon", "Bird", "BlownBottle", "Bowed", "BrassSection", "Breath", 
         "Brightness", "BrightPiano", "Calliope", "Celesta", "Cello", 
         "Charang", "Chiff", "Choir", "Clarinet", "Clavi", "Contrabass", 
         "Crystal", "DrawbarOrgan", "Dulcimer", "Echoes", "ElectricBass", 
         "ElectricGrandPiano", "ElectricGuitar", "ElectricPiano", 
         "ElectricPiano2", "EnglishHorn", "Fiddle", "Fifths", "Flute", 
         "FrenchHorn", "FretlessBass", "FretNoise", "Glockenspiel", "Goblins",
          "Guitar", "GuitarDistorted", "GuitarHarmonics", "GuitarMuted", 
         "GuitarOverdriven", "Gunshot", "Halo", "Harmonica", "Harp", 
         "Harpsichord", "Helicopter", "HonkyTonkPiano", "JazzGuitar", 
         "Kalimba", "Koto", "Marimba", "MelodicTom", "Metallic", "MusicBox", 
         "MutedTrumpet", "NewAge", "Oboe", "Ocarina", "OrchestraHit", "Organ",
          "PanFlute", "PercussiveOrgan", "Piano", "Piccolo", "PickedBass", 
         "PizzicatoStrings", "Polysynth", "Rain", "Recorder", "ReedOrgan", 
         "ReverseCymbal", "RockOrgan", "Sawtooth", "SciFi", "Seashore", 
         "Shakuhachi", "Shamisen", "Shanai", "Sitar", "SlapBass", "SlapBass2",
          "SopranoSax", "Soundtrack", "Square", "Steeldrums", "SteelGuitar", 
         "Strings", "Strings2", "Sweep", "SynthBass", "SynthBass2", 
         "SynthBrass", "SynthBrass2", "SynthDrum", "SynthStrings", 
         "SynthStrings2", "SynthVoice", "Taiko", "Telephone", "TenorSax", 
         "Timpani", "Tinklebell", "TremoloStrings", "Trombone", "Trumpet", 
         "Tuba", "TubularBells", "Vibraphone", "Viola", "Violin", "Voice", 
         "VoiceAahs", "VoiceOohs", "Warm", "Whistle", "Woodblock", 
         "Xylophone"}


https://zhuanlan.zhihu.com/p/100364244

这个项目的形成完全得益于主流编译器对 C++14 和 C++17 的支持。比如考虑如下 Mathematica 代码：

...
f = If[x > y, (# + 1)&, (# - 1)&];
f[5]
有了 C++14，这段代码就可以几乎不加改动地翻译成 C++，大大降低了项目的复杂度：

...
auto f = [condition = (x > y)](auto arg) {
    if (condition)
        return ([](auto x) { return x + 1; })(arg);
    else
        return ([](auto x) { return x - 1; })(arg);
};
return f(5);
你可以在这里找到我对 If 的实现。



https://zhuanlan.zhihu.com/p/52722078

Operators
Wolfram 语言最美妙（个人观点勿喷）的特性之一便是大量好用的操作符。尽管海量的操作符在语法识别上会把人逼疯，但它却几乎不会给一个简单宽松的语法描述文件带来任何负担，我们只需要把它们列出来就行了！为了在类别中更好的借以区分，我把它们分成了 15 类：

Replace:
  /.    Replace
  //.   ReplaceAll

Call:
  @     Prefix
  @@    Apply
  @@@   Apply
  /@    Map
  //@   MapAll
  //    Postfix
  ~     Infix
  @*    Composition
  /*    RightComposition

Comparison:
  >     Greater
  <     Less
  >=    GreaterEqual
  <=    LessEqual
  ==    Equal
  !=    Unequal
  ===   SameQ
  =!=   UnsameQ

Logical:
  !     Not
  ||    Or
  &&    And

Assignment:
  =     Set
  :=    SetDelayed
  ^=    UpSet
  ^:=   UpSetDelayed
  /:    TagSet (TagUnset, TagSetDelayed)
  =.    Unset
  +=    AddTo
  -=    SubtractFrom
  *=    TimesBy
  /=    DivideBy

Rule:
  ->    Rule
  :>    RuleDelayed
  <->   TwoWayRule

Condition:
  /;    Condition

Repeat:
  ..    Repeated
  ...   RepeatedNull

Arithmetic:
  +     Plus
  -     Minus, Subtract
  *     Multiply
  /     Divide
  ^     Power
  .     Dot
  !     Factorial
  !!    Factorial2
  '     Derivative
  **    NonCommutativeMultiply
  ++    Increment, PreIncrement
  --    Decrement, PreDecrement

Flow:
  <<    Get
  >>    Put
  >>>   PutAppend

String:
  <>    StringJoin
  ~~    StringExpression
  |     Alternatives

Span:
  ;;    Span

Compound:
  ;     CompoundExpression

Function:
  &     Function

Definition:
  ?     Definition
  ??    FullDefinition


https://zhuanlan.zhihu.com/p/33511796

2016 年夏天， Wolfram 公司似乎意识到“玩家们”对音频信号处理方面的需求日益增长，在新推出的 11.0 版 Mathematica 中引入了 Audio 对象的概念，并加入了一系列以“Audio”为开头命名的音频处理函数。当时，我看到了 MMA 在音频方面有巨大的“可玩性”，于是开始研究如何利用这些功能制作电子音乐。一开始，我主要用表示 MIDI 音符的 SoundNote 函数结合变调函数 AudioPitchShift 和变速函数 AudioTimeStretch 做了一些类似鬼畜的东西。后来我觉得这些都没啥意思，要玩就玩个大的、有技术含量的（歌声合成引擎），在 2017 年 7月我写下了这篇回答：

SoundNote[{"C","E", "G"}, 0.5, SoundVolume -> 0.1]//Sound  // EmitSound
CMajor = Table[SoundNote[i], {i, 0, 11}]
RandomChoice[CMajor, 20]// Sound
pitch={"C3","D3","E3","F3","G3","A3","B3","C4"};
tempo={.5,1,.5,1,.3,.2,.1,.1};
Sound[SoundNote[#,#2,"Piano"]&@@@Transpose@{pitch,tempo}]

