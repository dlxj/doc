@page "/"

@using dangan.Client.Model;
@using System.Text.Json;


@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@*<form action="/search" method="post">
        keyword: <input type="text" name="keyword">  <button type="submit">Search</button> <br>
        <select name="lang_select">
            <option value="en">en</option>
            <option value="jp">jp</option>
        </select>

    </form>*@

<title>Welcome!</title>

<EditForm Model="@model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    keyword:<InputText id="keyowrdInput" @bind-Value="model.keyword" />

    <button type="submit">Submit</button> <br>

    <select name="lang_select">
        <option value="en">en</option>
        <option value="jp">jp</option>
    </select>
</EditForm>


@if (rowData != null)
{

    @foreach (var row in rowData)
    {
        <br><br>
        @row.jp
        <br>
        @row.zh
    }

    <br><br>
    <button @onclick="@HandleSubmit">next</button>
    <br>
}

@if (debugQ)
{
    HandleSubmit();
}

@*
    https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/
        https://github.com/kevin-montrose/Jil
    https://www.0daydown.com/04/1611202.html
    https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-5.0


    https://jonhilton.net/blazor-markdown-editor/

*@


@code {

    private static readonly HttpClient client = new HttpClient();

    private static List<rowModel> rowData = null;

    bool debugQ = false;

    KeywordModel model = new KeywordModel();

    private async void HandleSubmit()
    {
        if (debugQ)
        {
            model.keyword = "ここ";
        }

        string keyword = model.keyword;

        //发送Post请求
        var values = new Dictionary<string, string>
{
            { "keyword", keyword },
            { "lang_select", "b" }
        };

        var content = new FormUrlEncodedContent(values);
        var response = await client.PostAsync("http://localhost:5000/search", content);
        var responseString = await response.Content.ReadAsStringAsync();

        var json = JsonDocument.Parse(responseString);

        JsonElement root = json.RootElement;

        var status = root.GetProperty("status").ToString();

        if (status == "200")
        {
            var data = root.GetProperty("data").ToString();

            var ls = JsonSerializer.Deserialize<List<rowModel>>(data);

            rowData = ls;

            await sessionStorage.SetItemAsync("keyword", keyword);
            await sessionStorage.SetItemAsync("lang_select", values["lang_select"]);
            var keyword_from_section = await sessionStorage.GetItemAsync<string>("keyword");

            Refresh();

            //MethodToTriggerUrl();  // jump to page x
        }


    }



    void MethodToTriggerUrl()
    {
        NavigationManager.NavigateTo("/");
    }

    public void Refresh()
    {
        // Update the UI
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}